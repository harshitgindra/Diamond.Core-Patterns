<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Diamond.Patterns.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Diamond.Patterns.Abstractions.ICommand">
            <summary>
            Defines a command to be used in the command pattern.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ICommand.ExecuteAsync">
            <summary>
            Executes the command.
            </summary>
            <returns>Returns a code indicating the result. The code is specific to the command.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ICommandFactory">
            <summary>
            Defines a factory to retrieve <see cref="T:Diamond.Patterns.Abstractions.ICommand"/> based
            on a name of the command.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ICommandFactory.GetAsync(System.String)">
            <summary>
            Gets the command specified by parameterSwitch.
            </summary>
            <param name="parameterSwitch">The unique name of the registered command.</param>
            <returns>An instance of <see cref="T:Diamond.Patterns.Abstractions.ICommand"/></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IApplicationContext">
            <summary>
            Defines a context that uses <see cref="T:Diamond.Patterns.Abstractions.IObjectFactory"/>.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IApplicationContext.Arguments">
            <summary>
            The arguments supplied to the application.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IApplicationContext.ObjectFactory">
            <summary>
            Gets the <see cref="T:Diamond.Patterns.Abstractions.IObjectFactory"/> instance.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IContext">
            <summary>
            Defines a generic context.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IContext.Name">
            <summary>
            Gets the name of the context.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IContextDecorator`1">
            <summary>
            Defines a decorator for a context that adds a state
            dictionary and a reset method.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IContextDecorator`1.Item">
            <summary>
            Gets the underlying context instance.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IContextDecorator`1.ResetAsync">
            <summary>
            Resets the context.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IContextDecorator`1.Properties">
            <summary>
            Gets/sets properties to be contained  within the context.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IDecorator">
            <summary>
            Defines a generic decorator.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IDecorator`2">
            <summary>
            Defines a decorator that can has wraps TItem and
            returns TResult.
            </summary>
            <typeparam name="TItem">The instance type being decorated.</typeparam>
            <typeparam name="TResult">The result of the decorator TakeActionAsync method.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IDecorator`2.TakeActionAsync(`0)">
            <summary>
            Executes the decorator action.
            </summary>
            <param name="item">The instance of the item being decorated.</param>
            <returns>The defined result of the action.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IContextFactory`1">
            <summary>
            Defines a factory that can create new instances of the specified
            database context.
            </summary>
            <typeparam name="TContext">The type of the database context
            supported by this factory instance.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IContextFactory`1.CreateContextAsync">
            <summary>
            Creates an instance of TContext.
            </summary>
            <returns>The new instance of TContext.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IContextFactory`1.CreateContext">
            <summary>
            Creates an instance of TContext.
            </summary>
            <returns>The new instance of TContext.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IDatabaseStrategy`1">
            <summary>
            Defines a strategy to use for database auto-creation.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IDatabaseStrategy`1.GetInitializer(System.Object,System.EventHandler{`0})">
            <summary>
            Gets the database initializer.
            </summary>
            <param name="modelBuilder">The model builder used to map CLR classes to a database schema.</param>
            <param name="onSeed">A method to be called to seed the database after it has been created.</param>
            <returns></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IStorageConfiguration">
            <summary>
            Contains information to define a connection for an Entity Framework context.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IStorageConfiguration.Description">
            <summary>
            Gets a description used to identify this storage
            configuration instance.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IStorageConfiguration.ConnectionString">
            <summary>
            Gets the connection string used for the Entity Framework context.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.DiamondPatternsException">
            <summary>
            This is an abstract class the defines the base object for all
            exceptions in the Diamond.Patterns library. This allows exceptions
            specific to this library to be caught separately than other exceptions.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.DiamondPatternsException.#ctor">
            <summary>
            Initializes a new instance of the System.Exception class.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.DiamondPatternsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.DiamondPatternsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference
            if no inner exception is specified.</param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.DiamondPatternsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with serialized data.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized
            object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information
            about the source or destination.</param>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IDecoratorFactory">
            <summary>
            Defines a factory to create/retrieve decorator instances.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IDecoratorFactory.GetAsync``2">
            <summary>
            Gets the specific decorator by type.
            </summary>
            <typeparam name="TItem">The type of object being decorated.</typeparam>
            <typeparam name="TResult">The type of the result returned by the decorator action.</typeparam>
            <returns>The result of the decorator action.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IDecoratorFactory.GetAsync``2(System.String)">
            <summary>
            Gets the specific decorator by type and name.
            </summary>
            <typeparam name="TItem">The type of object being decorated.</typeparam>
            <typeparam name="TResult">The type of the result returned by the decorator action.</typeparam>
            <param name="name">The unique name of the decorator.</param>
            <returns>The result of the decorator action.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IEntityFactory`1">
            <summary>
            Defines a factory to create entity models.
            </summary>
            <typeparam name="TInterface">The type of the entity model.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IEntityFactory`1.CreateAsync">
            <summary>
            Creates a new empty instance of an entity model.
            </summary>
            <returns>The newly created entity.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IObjectFactory">
            <summary>
            Defines a generic object factory that can be wrapped around a container to
            decouple the application from a specific container.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetInstance``1(System.Boolean)">
            <summary>
            Gets an instance of an object by type.
            </summary>
            <typeparam name="TService">The type of the object to retrieve.</typeparam>
            <param name="skipInitialization">Set to true if the object implements <see cref="T:Diamond.Patterns.Abstractions.IRequiresInitialization"/> but
            the initialization should be skipped.</param>
            <returns>The instance of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetInstance``1(System.String,System.Boolean)">
            <summary>
            Gets an instance of an object by type and name.
            </summary>
            <typeparam name="TService">The type of the object to retrieve.</typeparam>
            <param name="name">The name of the object to retrieve.</param>
            <param name="skipInitialization"></param>
            <returns>The instance of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetInstance(System.Type,System.Boolean)">
            <summary>
            Gets an instance of an object by type.
            </summary>
            <param name="objectType">The type of the object to retrieve.</param>
            <param name="skipInitialization">Set to true if the object implements <see cref="T:Diamond.Patterns.Abstractions.IRequiresInitialization"/> but
            the initialization should be skipped.</param>
            <returns>The instance of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetInstance(System.Type,System.String,System.Boolean)">
            <summary>
            Gets an instance of an object by type.
            </summary>
            <param name="objectType"></param>
            <param name="name">The name of the object to retrieve.</param>
            <param name="skipInitialization">Set to true if the object implements <see cref="T:Diamond.Patterns.Abstractions.IRequiresInitialization"/> but
            the initialization should be skipped.</param>
            <returns>The instance of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetAllInstances``1">
            <summary>
            Get all instances by type.
            </summary>
            <typeparam name="TService">The type of object to retrieve.</typeparam>
            <returns>The all instances of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.GetAllInstances(System.Type)">
            <summary>
            Get all instances by type.
            </summary>
            <param name="objectType">The type of object to retrieve.</param>
            <returns>The all instances of the specified object.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.ResolveByInterfaceAsync``1">
            <summary>
            Gets an object that implements a specific interfaces, not necessarily the interface
            registered in the container.
            </summary>
            <typeparam name="TService">The type of object to retrieve.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.RegisterSingletonInstance``1(System.String,``0)">
            <summary>
            Registers an instance of an object with the specified name.
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="name"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IObjectFactory.InitializeIfRequiredAsync(System.Object)">
            <summary>
            Checks if an object implements <see cref="T:Diamond.Patterns.Abstractions.IRequiresInitialization"/> and
            initializes it if necessary.
            </summary>
            <param name="item">The instance to check and in initialize.</param>
            <returns></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRepositoryFactory">
            <summary>
            Defines a factory to create/retrieve model repositories.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetAsync``1">
            <summary>
            Gets a generic <see cref="T:Diamond.Patterns.Abstractions.IRepository"/> for the specified model type.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetReadOnlyAsync``1">
            <summary>
            Gets a read-only IReadOnlyRepository for the specified model type.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetQueryableAsync``1">
            <summary>
            Gets a read-only IQueryableRepository for the specified model type.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetWritableAsync``1">
            <summary>
            Gets a read-only IWritableRepository for the specified model type.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetAsync``1(System.String)">
            <summary>
            Gets a generic <see cref="T:Diamond.Patterns.Abstractions.IRepository"/> for the specified model type and name.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <param name="name"></param>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetReadOnlyAsync``1(System.String)">
            <summary>
            Gets a read-only IReadOnlyRepository for the specified model type and name.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <param name="name"></param>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetQueryableAsync``1(System.String)">
            <summary>
            Gets a read-only IQueryableRepository for the specified model type and name.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <param name="name"></param>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryFactory.GetWritableAsync``1(System.String)">
            <summary>
            Gets a read-only IWritableRepository for the specified model type and name.
            </summary>
            <typeparam name="TInterface">The model type.</typeparam>
            <param name="name"></param>
            <returns>An instance of the repository for the model type specified.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRequiresInitialization">
            <summary>
            Defines an interfaces to be used to indicate that an object within
            a container requires initialization. This is useful when objects are
            instantiated by a container but need to be initialized. The default
            implementation of <see cref="T:Diamond.Patterns.Abstractions.IObjectFactory"/> checks objects for
            this interface and calls InitializeAsync() when CanInitialize returns
            true and IsInitialized returns false.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IRequiresInitialization.CanInitialize">
            <summary>
            Gets a value indicating if the instance can be initialized.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IRequiresInitialization.IsInitialized">
            <summary>
            Gets a value indicating if the instance has been initialized.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRequiresInitialization.InitializeAsync">
            <summary>
            Initializes the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRulesFactory">
            <summary>
            Defines a factory that can return all rules defined for a specific model
            (by type) and optionally a group name.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Diamond.Patterns.Abstractions.IRulesFactory.GetAllAsync``1" -->
        <!-- Badly formed XML comment ignored for member "M:Diamond.Patterns.Abstractions.IRulesFactory.GetAllAsync``1(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Diamond.Patterns.Abstractions.IRulesFactory.GetAllAsync``2" -->
        <!-- Badly formed XML comment ignored for member "M:Diamond.Patterns.Abstractions.IRulesFactory.GetAllAsync``2(System.String)" -->
        <member name="T:Diamond.Patterns.Abstractions.ISpecificationFactory">
            <summary>
            Defines a factory to create/retrieve a specification.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecificationFactory.GetAsync``1">
            <summary>
            Gets a specification with the return type TResult.
            </summary>
            <typeparam name="TResult">The return type of the specification result.</typeparam>
            <returns>An instance of the requested specification.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecificationFactory.GetAsync``1(System.String)">
            <summary>
            Gets a specification with the return type TResult and has the given name.
            </summary>
            <typeparam name="TResult">The return type of the specification result.</typeparam>
            <param name="name"></param>
            <returns>An instance of the requested specification.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecificationFactory.GetAsync``2">
            <summary>
            Gets a specification that takes TParameter as the filter and returns
            the type TResult.
            </summary>
            <typeparam name="TParameter">The type of the filter used in the specification.</typeparam>
            <typeparam name="TResult">The return type of the specification result.</typeparam>
            <returns>An instance of the requested specification.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecificationFactory.GetAsync``2(System.String)">
            <summary>
            Gets a specification that takes TParameter as the filter and returns
            the type TResult with the given name.
            </summary>
            <typeparam name="TParameter">The type of the filter used in the specification.</typeparam>
            <typeparam name="TResult">The return type of the specification result.</typeparam>
            <param name="name"></param>
            <returns>An instance of the requested specification.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IUnitOfWorkFactory">
            <summary>
            Defines a factory to create/retrieve a specification.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IUnitOfWorkFactory.GetAsync``2">
            <summary>
            Gets a unit of work that takes in TSourceItem and returns TResult.
            </summary>
            <typeparam name="TResult">The type of the result returned by the unit of work execution.</typeparam>
            <typeparam name="TSourceItem">The type of the input or parameter passed to the execution
            of the unit of work.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IUnitOfWorkFactory.GetAsync``2(System.String)">
            <summary>
            Gets a unit of work that takes in TSourceItem and returns TResult with the given key.
            </summary>
            <typeparam name="TResult">The type of the result returned by the unit of work execution.</typeparam>
            <typeparam name="TSourceItem">The type of the input or parameter passed to the execution
            of the unit of work.</typeparam>
            <param name="key">A unique key to distinguish this unit of work from other similar definitions.</param>
            <returns>The result of the execution as type TResult.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ILogger">
            <summary>
            Defines an interface for objects to support logging.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.ILogger.LoggerSubscriber">
            <summary>
            Gets/sets the logger method for object instance.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ILoggerSubscriber">
            <summary>
            Defines an interface for objects to be designated
            as a logger target.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.ILoggerSubscriber.Logger">
            <summary>
            Gets/sets the delegate used to receive log events.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.LoggerDecorator">
            <summary>
            Provides logging methods for an object that implements ILoggerSource.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Log(Diamond.Patterns.Abstractions.ILoggerSubscriber,Diamond.Patterns.Abstractions.LoggingLevel,System.String)">
            <summary>
            Creates a log entry on the specified interface with the
            given <see cref="T:Diamond.Patterns.Abstractions.LoggingLevel"/> and message.
            </summary>
            <param name="loggerSubscriber">The source interface.</param>
            <param name="loggingLevel">The level of the log entry.</param>
            <param name="message">The log entry message.</param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Log(Diamond.Patterns.Abstractions.ILoggerSubscriber,Diamond.Patterns.Abstractions.LoggingLevel,System.String,System.Object[])">
            <summary>
            Creates a log entry on the specified interface with the
            given <see cref="T:Diamond.Patterns.Abstractions.LoggingLevel"/> and formatted string and
            arguments.
            </summary>
            <param name="loggerSubscriber">The source interface.</param>
            <param name="loggingLevel">The level of the log entry.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Log(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.Exception)">
            <summary>
            Creates a log entry on the specified interface with the
            given <see cref="T:Diamond.Patterns.Abstractions.LoggingLevel"/> and exception. This method
            will create an entry for all inner exceptions as well.
            </summary>
            <param name="loggerSubscriber">The source interface.</param>
            <param name="exception">Represents the error that occurred during application execution.</param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Exception(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.Exception)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="exception"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Information(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Information(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Warning(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Warning(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Error(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Error(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Fatal(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Fatal(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Debug(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Debug(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Verbose(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String)">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="message"></param>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.LoggerDecorator.Verbose(Diamond.Patterns.Abstractions.ILoggerSubscriber,System.String,System.Object[])">
             <summary>
            
             </summary>
             <param name="loggerSubscriber"></param>
             <param name="format"></param>
             <param name="args"></param>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.LoggerDelegate">
            <summary>
            A delegate for a callback method that can be used to obtain
            log messages from an object.
            </summary>
            <param name="loggingLevel">Specifies the type of information represented by a log entry.</param>
            <param name="message">The log message.</param>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.LoggingLevel">
            <summary>
            Specifies the type of information represented by a log entry.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Information">
            <summary>
            The entry is informational.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Warning">
            <summary>
            The entry indicates an warning has occurred. These entries
            are usually a result of unexpected behavior that does not
            prevent the application from performing in the desired manner.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Error">
            <summary>
            The entry indicates an error has occurred. These entries
            are usually a result o unexpected behavior that prevents
            the application from performing in the desired manner.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Fatal">
            <summary>
            The entry indicates an error has occurred that has resulted
            in the suspension or termination of the application.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Debug">
            <summary>
            The entry is a debug message that contains useful information
            for troubleshooting an issue.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.LoggingLevel.Verbose">
            <summary>
            The entry is verbose information that can be used to understand
            the detailed flow of an application.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IEntity">
            <summary>
            Base entity class allowing generic classes for any
            interface defined as an "Entity".
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IEntity`1">
            <summary>
            Base entity class with a "ID" defined as type T. Each
            entity (or model) will defined it's own ID type based
            on the Mail.dat specification.
            </summary>
            <typeparam name="T">The type of ID for this entity.</typeparam>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IEntity`1.Id">
            <summary>
            Get/sets or unique ID for this item.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ResultType">
            <summary>
            Specifies the result type of a controller action.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ResultType.Ok">
            <summary>
            The action result in success (usually a 200 status).
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ResultType.NotFound">
            <summary>
            The action result in not found (usually a 404 status).
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ResultType.BadRequest">
            <summary>
            The action result in bad request (usually a 400 status).
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IControllerActionResult`1">
            <summary>
            Contains the result of a controller action.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IControllerActionResult`1.ResultType">
            <summary>
            The type of response usually associated to an HTTP status code.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IControllerActionResult`1.ErrorMessage">
            <summary>
            A description of the error if the action failed.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IControllerActionResult`1.Result">
            <summary>
            The resulting object instance if the action was successful.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IQueryableRepository`1">
            <summary>
            Defines a repository that supports a queryable interface. The connection remains open until specifically
            closed by the caller.
            </summary>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IQueryableRepository`1.GetContextAsync">
            <summary>
            Gets an active context that can be used for subsequent queries. This context
            can be shared among repositories for the same underlying data store (database).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IQueryableRepository`1.GetQueryableAsync(Diamond.Patterns.Abstractions.IRepositoryContext)">
            <summary>
            Gets a <see cref="T:System.Linq.IQueryable"/> of type TInterface using the specified context.
            </summary>
            <param name="context">A context retrieved from a all to GetContextAsync().</param>
            <returns>Returns an <see cref="T:System.Linq.IQueryable"/> of type TInterface.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IReadOnlyRepository`1">
            <summary>
            Defines a repository that supports read-only queries against a data store. These queries return
            an IEnumberable of TInterface.
            </summary>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IReadOnlyRepository`1.GetAllAsync">
            <summary>
            Returns all items in the data store.
            </summary>
            <returns>Returns an IEnumberable of TInterface</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IReadOnlyRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns a filtered list of items from the data store.
            </summary>
            <param name="predicate">Defines the query to be applied before returning the results.</param>
            <returns>Returns an IEnumberable of TInterface</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRepository">
            <summary>
            Defines a generic repository interface.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRepository`1">
            <summary>
            Defines a generic repository interface that stores an entity of type TInterface.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ContextIsolationLevel">
            <summary>
            Defines the  isolation level to be used in transactions.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ContextIsolationLevel.RepeatableRead">
            <summary>
            Protects against Lost Updates, Dirty Reads, non-repeatable Reads, and Phantoms
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ContextIsolationLevel.ReadStability">
            <summary>
            Protects against Lost Updates, Dirty Reads, and non-repeatable Reads. Read stability
            does not protect against Phantoms.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ContextIsolationLevel.CursorStability">
            <summary>
            Protects against non-repeatable Reads and Phantoms. Cursor Stability does not protect
            against Lost Updates and Dirty Reads.
            </summary>
        </member>
        <member name="F:Diamond.Patterns.Abstractions.ContextIsolationLevel.UncommitedRead">
            <summary>
            Protects against Lost Updates. Uncommitted Read does not protect against Phantoms,
            Dirty Reads, and Non-repeatable Reads.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRepositoryContext">
            <summary>
            This interface is used as a handle for any type of context
            without the need to expose the type.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.EnableBulkLoadAsync">
            <summary>
            Indicates to the data store that it should prepare for a large volume of
            new records to be added. This may not be supported on all data stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.DisableBulkLoadAsync">
            <summary>
            Indicates to the data store that the bulk operation has completed or has
            been canceled. This may not be supported on all data stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.ExecuteSqlCommandAsync(System.String)">
            <summary>
            Executes a SQL command against the data store. This may not be supported
            on all data stores.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.BeginTransactionAsync">
            <summary>
            Starts a transaction on the data store. This may not be supported on all data stores.
            </summary>
            <returns>Returns a transaction context that can  be used to manage the transaction.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.BeginTransactionAsync(Diamond.Patterns.Abstractions.ContextIsolationLevel)">
            <summary>
            Starts a transaction on the data store. This may not be supported on all data stores.
            </summary>
            <param name="isolationLevel">Indicates the isolation level to use for the new transaction.</param>
            <returns>Returns a transaction context that can  be used to manage the transaction.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.UseTransactionAsync(Diamond.Patterns.Abstractions.IRepositoryTransactionContext)">
            <summary>
            Uses an existing transaction on the data store. This may not be supported on all data stores.
            </summary>
            <param name="transactionContext">The current  transaction context to be used.</param>
            <returns>returns true if successful; false otherwise.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryContext.SaveAsync">
            <summary>
            Saves all changes in  the current instance.
            </summary>
            <returns>Returns the number of items affected by the save operation.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRepositoryTransactionContext">
            <summary>
            Defines a transaction context for a data store.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryTransactionContext.CommitTransactionAsync">
            <summary>
            Commits all changes on the given data store associated
            with this transaction context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRepositoryTransactionContext.RollbackTransactionAsync">
            <summary>
            Rolls back all changes on the given data store associated
            with this transaction context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWritableRepository`1">
            <summary>
            Defines a repository that can be used to modify items in a data store.
            </summary>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWritableRepository`1.ModelFactory">
            <summary>
            Gets the model factory used to create new models.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.AddAsync(`0)">
            <summary>
            Adds a new entity to the data store.
            </summary>
            <param name="entity">An instance of a new entity.</param>
            <returns>Returns true along with an updated entity (if the data store changed
            or added data); false otherwise.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.DeleteAsync(`0)">
            <summary>
            Deletes the specified entity from the data store.
            </summary>
            <param name="entity">An instance of an existing entity.</param>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.UpdateAsync(`0)">
            <summary>
            Updates an existing entity in the data store.
            </summary>
            <param name="entity">An instance of an existing entity.</param>
            <returns></returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.AddAsync(Diamond.Patterns.Abstractions.IRepositoryContext,`0)">
            <summary>
            Adds a new entity to the data store using the specified repository
            context.
            </summary>
            <param name="repositoryContext">An existing repository context to use for the transaction.</param>
            <param name="entity">An instance of a new entity.</param>
            <returns>Returns the updated entity (if the data store changed
            or added data)</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.DeleteAsync(Diamond.Patterns.Abstractions.IRepositoryContext,`0)">
            <summary>
            Deletes the specified entity from the data store using the
            specified repository context.
            </summary>
            <param name="repositoryContext"></param>
            <param name="entity">An instance of an existing entity.</param>
            <returns>Returns true if successful; false otherwise.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWritableRepository`1.UpdateAsync(Diamond.Patterns.Abstractions.IRepositoryContext,`0)">
            <summary>
            Updates an existing entity in the data store using the specified
            repository context.
            </summary>
            <param name="repositoryContext"></param>
            <param name="entity">An instance of an existing entity.</param>
            <returns>Returns true if successful; false otherwise.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRule">
            <summary>
            Interface defining a generic rule.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IRule.Group">
            <summary>
            Group name to distinguish between different rule sets.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRule`2">
            <summary>
            Interface defining a generic rule.
            </summary>
            <typeparam name="TItem">The type of item the rule is applied to.</typeparam>
            <typeparam name="TResult">The object type of the result.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IRule`2.ValidateAsync(`0)">
            <summary>
            Validate entity based on the defined rule asynchronously.
            </summary>
            <param name="item">The item to be validated.</param>
            <returns>A boolean value indicating whether or not the rule has been
            validated. If false, an error message is returned.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IRule`1">
            <summary>
            Interface defining a generic rule.
            </summary>
            <typeparam name="TItem">The type of item the rule is applied to.</typeparam>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ISpecification">
            <summary>
            Defines a generic specification.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ISpecification`1">
            <summary>
            Defines a specification that does not require inputs and returns a result of type TResult.
            </summary>
            <typeparam name="TResult">The return type of the specification action.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecification`1.ExecuteQueryAsync">
            <summary>
            Executes the specification.
            </summary>
            <returns>Returns the result as a instance of type TResult.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ISpecification`2">
            <summary>
            Defines a specification that requires input of type TParameter (filter) and returns
            a result of type TResult.
            </summary>
            <typeparam name="TParameter">The type of the filter applied to the execution of the 
            specification execution.</typeparam>
            <typeparam name="TResult">The return type of the specification action.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ISpecification`2.ExecuteQueryAsync(`0)">
            <summary>
            Executes the specification.
            </summary>
            <param name="filter">The filter to apply to the execution of the specification.</param>
            <returns>Returns the result as a instance of type TResult.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IStateDictionary">
            <summary>
            Defines a dictionary that can be used to manage state in work flows
            or other patterns.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.ConvertParameter(System.String,System.Type)">
            <summary>
            Retrieves and converts a dictionary item to the specified type.
            </summary>
            <param name="key">The unique key of the item to retrieve.</param>
            <param name="targetType">The target type.</param>
            <returns>The value of the dictionary item in the specified type or an 
            error if the item could not be converted.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.ConvertParameter``1(System.String)">
            <summary>
            Retrieves and converts a dictionary item to the specified type.
            </summary>
            <typeparam name="TTarget">The target type.</typeparam>
            <param name="key">The unique key of the item to retrieve.</param>
            <returns>The value of the dictionary item in the specified type or an 
            error if the item could not be converted.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.Get``1(System.String)">
            <summary>
            Retrieves a dictionary item and  casts it to the specified type. No 
            conversion is performed. An exception is thrown if the key is invalid.
            </summary>
            <typeparam name="TProperty">The target type.</typeparam>
            <param name="key">The unique key of the item to retrieve.</param>
            <returns>returns the item as the given type.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.Get``1(System.String,``0)">
            <summary>
            Retrieves a dictionary item and  casts it to the specified type. No 
            conversion is performed. The default value is returned if the key
            is invalid.
            </summary>
            <typeparam name="TProperty">The target type.</typeparam>
            <param name="key">The unique key of the item to retrieve.</param>
            <param name="defaultValue">The default value to return if the item does not exist.</param>
            <returns>returns the item (or the default value) as the given type.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.TryGet``1(System.String,``0)">
            <summary>
            Attempts to retrieve an item from the dictionary by the specified key. If the
            item does not exist it will be created and initialized with initializeValue.
            </summary>
            <typeparam name="TProperty">The target type.</typeparam>
            <param name="key">The unique key of the item to retrieve.</param>
            <param name="initializeValue">The value to initialize the item to if it does not exist.</param>
            <returns>Returns the existing item or the initialized item.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateDictionary.Set``1(System.String,``0)">
            <summary>
            Sets a value in the dictionary. I the item does not exist, it is created. If
            the item already exists, it is updated. Attempting to change the item type
            could have unexpected side affects and is not recommended.
            </summary>
            <typeparam name="TProperty">The target type.</typeparam>
            <param name="key">The unique key of the item to retrieve.</param>
            <param name="value">The value used to set the item.</param>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IStateTypeConverter">
            <summary>
            Defines a state converter that can convert a state dictionary time from one type to another.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IStateTypeConverter.TargetType">
            <summary>
            Get the target type of the converter.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IStateTypeConverter.ConvertSource(System.Object,System.Type)">
            <summary>
            Converts the item from the source to the target.
            </summary>
            <param name="sourceValue">The value being converted.</param>
            <param name="specificTargetType">The target type of the conversion.</param>
            <returns>Returns the converted item or an error.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ITemporaryFolder">
            <summary>
            Provides a wrapper for creating and managing temporary folders. Concrete
            classes should implement IDisposable (not required) to remove temporary
            files and folders when the instance is no longer in use.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.ITemporaryFolder.NamingFormat">
            <summary>
            Gets/sets a string format with two variables, {0} and {1}, where
            the first place holder will be replaced with the temporary folder
            path and the second place holder will be replaced with the temporary
            folder name.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.ITemporaryFolder.FullPath">
            <summary>
            Gets the full path to the temporary folder that is created by this instance.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.ITemporaryFolderFactory">
            <summary>
            Factory for creating instances of ITemporaryFolder.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ITemporaryFolderFactory.Create">
            <summary>
            Creates a default instance of ITemporaryFolder.
            </summary>
            <returns>An instance of ITemporaryFolder.</returns>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.ITemporaryFolderFactory.Create(System.String)">
            <summary>
            Creates a default instance of ITemporaryFolder using
            the given name format.
            </summary>
            <param name="namingFormat">Specifies the naming format to
            use with this new instance</param>
            <returns>An instance of ITemporaryFolder.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IUnitOfWork">
            <summary>
            Defines a generic unit of work.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IUnitOfWork.Key">
            <summary>
            A unique key to distinguish similar unit of works instances.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IUnitOfWork`2">
            <summary>
            A unit of work that takes TSourceItem and returns type TResult.
            </summary>
            <typeparam name="TResult">The type of the result returned by the unit of work.</typeparam>
            <typeparam name="TSourceItem">The type of the source item for the unit of work.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IUnitOfWork`2.CommitAsync(`1)">
            <summary>
            Executes the unit of work.
            </summary>
            <param name="item">The source item used in the transaction.</param>
            <returns>The result of the action as object instance of type TResult.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowItem">
            <summary>
            Defines a work flow item.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowItem.Ordinal">
            <summary>
            Specifies the order in which the specified step is executed in a given
            work flow.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowItem.Name">
            <summary>
            A unique name for the specified step usually used for display or logging
            purposes.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowItem.Group">
            <summary>
            A unique name that groups one or more steps together for a given
            work flow.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowItem.Weight">
            <summary>
            Defines the weight applied to this step when showing progress. The default
            is 1 which makes it "evenly" weighted. A smaller value indicates this
            step should have less of an impact on the progress *takes less time to complete)
            while larger numbers have more of an impact (they take more time to complete).
            These numbers are totally arbitrary and are evaluated in relation to all
            other weights in the work flow.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowItem.AlwaysExecute">
            <summary>
            Indicates that regardless of the result of previous steps, this step
            should always execute. This is used in linear work flow managers that
            stop executing when one of the steps fail. A step marked with this
            attribute usually a "clean-up" step that must execute every time. This
             property may be ignored by certain work flow managers.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowItem`2">
            <summary>
            Defines a work flow item.
            </summary>
            <typeparam name="TContextDecorator">The type of context decorator that contains the state dictionary.</typeparam>
            <typeparam name="TContext">The type of context used by the work flow item.</typeparam>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWorkFlowItem`2.ExecuteStepAsync(`0)">
            <summary>
            Performs the work for the specified step.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWorkFlowItem`2.ShouldExecute(`0)">
            <summary>
            Indicates whether or not a step should be executed during a work flow.
            his is used by conditional work flow managers where every step in the
            work flow is executed from start to finish unless tis property returns
            false. This property may be ignored by certain work flow managers.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowItemFactory">
            <summary>
            Defines a factory to create/retrieve work flow items.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWorkFlowItemFactory.GetItemsAsync``2(System.String)">
            <summary>
            gets all work flow items instances with the given key.
            </summary>
            <typeparam name="TContextDecorator">The type of context decorator used by the work flow item.</typeparam>
            <typeparam name="TContext">The type of context used by  the work flow item.</typeparam>
            <param name="key">The key that groups two or more work flow items into a single sequence.</param>
            <returns>A list of work flow items.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowManager">
            <summary>
            Defines a generic work flow manager.
            </summary>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowManager.Group">
            <summary>
            The group name used to determine the work flow
            items that are part of this work flow.
            </summary>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowManager`2">
            <summary>
            Defines a work flow manager that orchestrates the work flow for a
            given set of work flow items.
            </summary>
            <typeparam name="TContextDecorator">The type of context decorator used by the work flow item.</typeparam>
            <typeparam name="TContext">The type of context used by  the work flow item.</typeparam>
        </member>
        <member name="P:Diamond.Patterns.Abstractions.IWorkFlowManager`2.Steps">
            <summary>
            Gets the work flow items in their execution order.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWorkFlowManager`2.ExecuteWorkflowAsync(`0)">
            <summary>
            Executes the work flow.
            </summary>
            <param name="context">The current context to be used for this instance of the work flow execution.</param>
            <returns>True if the work flow was successful; false otherwise.</returns>
        </member>
        <member name="T:Diamond.Patterns.Abstractions.IWorkFlowManagerFactory">
            <summary>
            Defines a factory that will retrieve the work flow manager for a given work flow.
            </summary>
        </member>
        <member name="M:Diamond.Patterns.Abstractions.IWorkFlowManagerFactory.GetAsync``2(System.String)">
            <summary>
            Gets the work flow items for a given work flow identified by groupName;
            </summary>
            <typeparam name="TContextDecorator">The type of context decorator used by the work flow item.</typeparam>
            <typeparam name="TContext">The type of context used by  the work flow item.</typeparam>
            <param name="groupName">a name that groups work flow items together.</param>
            <returns>Returns the work flow manager for the specified work flow.</returns>
        </member>
    </members>
</doc>
